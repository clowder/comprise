{"name":"Comprise","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"List Comprehension for Ruby.","body":"# Comprise\r\n\r\nComprise brings basic List Comprehension functionality to Ruby.\r\n\r\n> &ldquo;A list comprehension is a syntactic construct available in some programming languages for creating a list based on existing lists. It follows the form of the mathematical set-builder notation (set comprehension) as distinct from the use of map and filter functions.&rdquo; - Wikipedia\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'comprise'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install comprise\r\n\r\n## Usage\r\n\r\nBuilding a comprehension goes something like:\r\n\r\n```ruby\r\ncomp = Comprise::ListComprehension.new(y: -> { (1..5).map { |i| i * 2 } }, x: 1..2)\r\n# => #<Comprise::ListComprehension:70101319648040>\r\n\r\ncomp.to_a\r\n# => [[2, 1], [2, 2], [4, 1], [4, 2], [6, 1], [6, 2], [8, 1], [8, 2], [10, 1], [10, 2]]\r\n\r\ncomp.map { x * y }.to_a # to_a to trigger lazy enumeration in Ruby 2.0\r\n# => [2, 4, 4, 8, 6, 12, 8, 16, 10, 20]\r\n```\r\n\r\nComprise also adds the Kernel method `listcomp`, so all that could be done more simply with the\r\none-liner:\r\n\r\n```ruby\r\nlistcomp(y: -> { (1..5).map { |i| i * 2 } }, x: 1..2) { x * y }.to_a\r\n=> [2, 4, 4, 8, 6, 12, 8, 16, 10, 20]\r\n```\r\n\r\n*Important note: In Ruby 2.0.x Comprise makes use of Lazy emuerators.*\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":""}